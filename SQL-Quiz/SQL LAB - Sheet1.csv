Question,Expected Output,Answer (Query)
1. E-commerce Sales: Join Orders and Customers tables to get a list of orders with customer names. What happens if a customer ID in Orders doesn't exist in Customers?,"order_id = 1001, name = Alice Johnson"," SELECT Orders.order_id, Customers.name FROM Orders INNER JOIN Customers ON Orders.customer_id = Customers.id;"
2. Healthcare Records: Retrieve patient information from Patients and their respective doctor's name from Doctors table based on doctor_id. What if some patients don't have a doctor assigned (doctor_id is NULL)?,"patient_name = Alice Smith, doctor_name = Dr. Brown"," SELECT Patients.patient_name, Doctors.doctor_name FROM Patients INNER JOIN Doctors ON Patients.doctor_id = Doctors.id;"
3. Financial Transactions: List all transactions with their associated account holder's name from Transactions and AccountHolders. What if an account holder is deleted but their transactions still exist?,"transaction_id = 2001, name = Bob Williams, amount = 150.75, date = 2024-07-15"," SELECT Transactions.transaction_id, AccountHolders.name, Transactions.amount, Transactions.date FROM Transactions INNER JOIN AccountHolders ON Transactions.account_holder_id = AccountHolders.id;"
4. Retail Billing: Combine Bills and Products tables to display each billed product name and its price. What happens if a bill references a product that no longer exists?,"bill_id = 3001, product_name = Widget, price = 19.99, quantity = 2"," SELECT Bills.bill_id, Products.product_name, Products.price, Bills.quantity FROM Bills INNER JOIN Products ON Bills.product_id = Products.id;"
"5. Big Data Filtering: In a data warehouse, join Clicks and Users tables to analyze clicks by user demographics. What if some clicks are by unregistered users?","click_id = 4001, age = 28, gender = F, timestamp = 2024-08-01 14:32:00"," SELECT Clicks.click_id, Users.age, Users.gender, Clicks.timestamp FROM Clicks INNER JOIN Users ON Clicks.user_id = Users.id;"
6. Manufacturing Industry: Retrieve machine maintenance records from Maintenance and the machine details from Machines table. What happens if a maintenance record references a machine that's no longer in use?,"record_id = 5001, machine_name = Lathe, date = 2024-07-20, cost = 200.00"," SELECT Maintenance.record_id, Machines.machine_name, Maintenance.date, Maintenance.cost FROM Maintenance INNER JOIN Machines ON Maintenance.machine_id = Machines.id;"
7. Education System: Get a list of students and their enrolled courses from Enrollments and Courses tables. What if a course ID in Enrollments doesn't match any course in Courses?,"student_id = 6001, course_name = Math 101, enrollment_date = 2024-08-01"," SELECT Enrollments.student_id, Courses.course_name, Enrollments.enrollment_date FROM Enrollments INNER JOIN Courses ON Enrollments.course_id = Courses.id;"
8. Hospitality Management: Combine Reservations and Rooms to show each reservation with room details. What if a reservation references a room that has been removed from the system?,"reservation_id = 7001, room_type = Suite, check_in_date = 2024-08-05, check_out_date = 2024-08-12"," SELECT Reservations.reservation_id, Rooms.room_type, Reservations.check_in_date, Reservations.check_out_date FROM Reservations INNER JOIN Rooms ON Reservations.room_id = Rooms.id;"
9. Logistics: Display shipments and their corresponding destination details by joining Shipments and Destinations. What happens if some shipments have invalid or NULL destination IDs?,"shipment_id = 8001, location = San Francisco, weight = 50.0, shipment_date = 2024-07-30"," SELECT Shipments.shipment_id, Destinations.location, Shipments.weight, Shipments.shipment_date FROM Shipments INNER JOIN Destinations ON Shipments.destination_id = Destinations.id;"
10. Tech Support: Retrieve support tickets and their assigned technician's name from Tickets and Technicians. What if some tickets don't have a technician assigned (technician_id is NULL)?,"ticket_id = 9001, technician_name = Jane Doe, issue_description = System crash, created_date = 2024-08-01"," SELECT Tickets.ticket_id, Technicians.technician_name, Tickets.issue_description, Tickets.created_date FROM Tickets INNER JOIN Technicians ON Tickets.technician_id = Technicians.id;"
11. Library System: Join Books and Authors to list book titles along with their authors. What if some books have no assigned author?,"title = ""The Great Gatsby"", name = ""F. Scott Fitzgerald"""," SELECT Books.title, Authors.name FROM Books INNER JOIN Authors ON Books.author_id = Authors.id;"
12. Online Courses: Retrieve student names and their enrolled courses from StudentEnrollments and Courses. What if some students are not enrolled in any courses?,"name = ""Emma Davis"", course_name = ""Introduction to Data Science"""," SELECT Students.name, Courses.course_name FROM StudentEnrollments INNER JOIN Courses ON StudentEnrollments.course_id = Courses.id INNER JOIN Students ON StudentEnrollments.student_id = Students.id;"
13. Sales Orders: Get a list of sales orders and the sales representative handling each order from SalesOrders and SalesReps. What if an order has no assigned sales rep?,"order_id = 1501, rep_name = ""Sarah Lee"""," SELECT SalesOrders.order_id, SalesReps.rep_name FROM SalesOrders INNER JOIN SalesReps ON SalesOrders.rep_id = SalesReps.id;"
14. Product Inventory: Join Inventory and Products to list product names and their current stock levels. What happens if a product in inventory is no longer listed in the Products table?,"product_id = 301, product_name = ""Smartphone"", stock_level = 25"," SELECT Inventory.product_id, Products.product_name, Inventory.stock_level FROM Inventory INNER JOIN Products ON Inventory.product_id = Products.id;"
15. Customer Support: Combine Tickets and SupportAgents to show ticket details with the assigned agent's name. What if some tickets do not have an assigned agent?,"ticket_id = 1010, agent_name = ""Tom Harris"", issue = ""Login issue"""," SELECT Tickets.ticket_id, SupportAgents.agent_name, Tickets.issue FROM Tickets INNER JOIN SupportAgents ON Tickets.agent_id = SupportAgents.id;"
16. Movie Database: Join Movies and Directors to list movie titles and their directors. What if some movies do not have a director assigned?,"title = ""Inception"", director_name = ""Christopher Nolan"""," SELECT Movies.title, Directors.director_name FROM Movies INNER JOIN Directors ON Movies.director_id = Directors.id;"
17. Employee Projects: Get a list of employees and their projects from Employees and Projects. What if some employees are not assigned to any projects?,"name = ""John Smith"", project_name = ""Website Redesign"""," SELECT Employees.name, Projects.project_name FROM EmployeeProjects INNER JOIN Projects ON EmployeeProjects.project_id = Projects.id INNER JOIN Employees ON EmployeeProjects.employee_id = Employees.id;"
18. Event Registrations: Join Registrations and Events to show each registration with event details. What if some registrations reference events that no longer exist?,"registration_id = 5001, event_name = ""Tech Conference"", registration_date = ""2024-08-10"""," SELECT Registrations.registration_id, Events.event_name, Registrations.registration_date FROM Registrations INNER JOIN Events ON Registrations.event_id = Events.id;"
19. Real Estate Listings: Retrieve property details and their respective agents from Properties and Agents. What if some properties are not currently listed with any agents?,"address = ""123 Elm St"", agent_name = ""Laura Chen"""," SELECT Properties.address, Agents.agent_name FROM Properties INNER JOIN Agents ON Properties.agent_id = Agents.id;"
20. Gym Memberships: Combine Memberships and Members to list each membership type with member details. What happens if a membership type does not have a corresponding member?,"membership_id = 7001, member_name = ""Emily Johnson"", type = ""Premium"""," SELECT Memberships.membership_id, Members.member_name, Memberships.type FROM Memberships INNER JOIN Members ON Memberships.member_id = Members.id;"
21. Car Rentals: Join Rentals and Cars to display rental records along with car details. What if a rental record references a car that has been removed?,"`rental_id = 8001, car_model = ""Toyota Camry"," SELECT Rentals.rental_id, Cars.car_model, Rentals.rental_date FROM Rentals INNER JOIN Cars ON Rentals.car_id = Cars.id;"
How do you find the total sales in a financial database?,SUM(sales_amount) = 150000,SELECT SUM(sales_amount) FROM sales;
2. How do you calculate the average salary of employees in a company?,AVG(salary) = 55000,SELECT AVG(salary) FROM employees;
3. How do you count the number of transactions in a financial year?,COUNT(transaction_id) = 12000,SELECT COUNT(transaction_id) FROM transactions WHERE YEAR(transaction_date) = 2023;
4. How do you find the maximum transaction amount in a day?,MAX(amount) = 5000,SELECT MAX(amount) FROM transactions WHERE transaction_date = '2023-08-01';
5. How do you find the minimum balance in accounts?,MIN(balance) = 50,SELECT MIN(balance) FROM accounts;
6. How do you find customers who made no transactions in a month?,customer_id = 102,SELECT customer_id FROM customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM transactions WHERE MONTH(transaction_date) = 8);
7. How do you retrieve customers and their total transaction amounts?,"customer_id = 201, SUM(amount) = 10000","SELECT customer_id, SUM(amount) FROM transactions GROUP BY customer_id;"
8. How do you find the top 5 highest earning products?,"product_id = 301, total_sales = 200000","SELECT product_id, SUM(sales) as total_sales FROM sales GROUP BY product_id ORDER BY total_sales DESC LIMIT 5;"
9. How do you get the top 10 customers by transaction count?,"customer_id = 202, transaction_count = 25","SELECT customer_id, COUNT(transaction_id) as transaction_count FROM transactions GROUP BY customer_id ORDER BY transaction_count DESC LIMIT 10;"
10. How do you join customers and orders tables to get customer order details?,"name = John Doe, order_id = 1001","SELECT customers.name, orders.order_id FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id;"
11. How do you find customers who placed orders in both 2022 and 2023?,customer_id = 303,SELECT DISTINCT customer_id FROM orders WHERE YEAR(order_date) = 2022 INTERSECT SELECT DISTINCT customer_id FROM orders WHERE YEAR(order_date) = 2023;
12. How do you find the number of employees in each department?,"department_id = 401, COUNT(employee_id) = 50","SELECT department_id, COUNT(employee_id) FROM employees GROUP BY department_id;"
13. How do you retrieve employee names with salaries above average?,name = Jane Smith,SELECT name FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);
14. How do you calculate the total salary expenses for each department?,"department_id = 402, SUM(salary) = 2500000","SELECT department_id, SUM(salary) FROM employees GROUP BY department_id;"
15. How do you find the second highest salary in the company?,MAX(salary) = 120000,SELECT MAX(salary) FROM employees WHERE salary < (SELECT MAX(salary) FROM employees);
16. How do you retrieve all orders made in the last 7 days?,"order_id = 1050, order_date = '2023-08-01'",SELECT * FROM orders WHERE order_date >= CURDATE() - INTERVAL 7 DAY;
17. How do you identify duplicate records in a table?,"column1 = A, column2 = B, COUNT(*) = 2","SELECT column1, column2, COUNT(*) FROM table_name GROUP BY column1, column2 HAVING COUNT(*) > 1;"
18. How do you calculate the monthly revenue for the year 2023?,"month = 7, monthly_revenue = 300000","SELECT MONTH(transaction_date) as month, SUM(amount) as monthly_revenue FROM transactions WHERE YEAR(transaction_date) = 2023 GROUP BY month;"
19. How do you find the number of active customers in the last 30 days?,COUNT(DISTINCT customer_id) = 500,SELECT COUNT(DISTINCT customer_id) FROM transactions WHERE transaction_date >= CURDATE() - INTERVAL 30 DAY;
20. How do you find the transaction count per customer in a specific region?,"customer_id = 501, COUNT(transaction_id) = 15","SELECT customer_id, COUNT(transaction_id) FROM transactions WHERE region = 'North' GROUP BY customer_id;"
21. How do you update the status of all transactions above $1000 to 'High'?,Rows updated,UPDATE transactions SET status = 'High' WHERE amount > 1000;
22. How do you find the percentage of transactions above $500?,percentage_above_500 = 40.0,SELECT (COUNT(*) FILTER (WHERE amount > 500) / COUNT(*)) * 100 as percentage_above_500 FROM transactions;
23. How do you retrieve customers with more than three transactions?,customer_id = 601,SELECT customer_id FROM transactions GROUP BY customer_id HAVING COUNT(transaction_id) > 3;
24. How do you calculate the difference between maximum and minimum transaction amounts for each customer?,"customer_id = 701, amount_difference = 4500","SELECT customer_id, MAX(amount) - MIN(amount) as amount_difference FROM transactions GROUP BY customer_id;"
25. How do you select all columns from a table?,All columns and rows displayed,SELECT * FROM table_name;
26. How do you select specific columns from a table?,"column1, column2","SELECT column1, column2 FROM table_name;"
27. How do you sort records in SQL?,Sorted records,`SELECT * FROM table_name ORDER BY column1 ASC
28. How do you group records in SQL?,Grouped records,"SELECT column1, COUNT(*) FROM table_name GROUP BY column1;"
29. What is the purpose of the HAVING clause?,Filtered aggregate records,"SELECT column1, COUNT(*) FROM table_name GROUP BY column1 HAVING COUNT(*) > 1;"
30. How do you find the top 5 highest earning products by category?,"category = Electronics, total_sales = 500000","SELECT category, SUM(sales) as total_sales FROM sales GROUP BY category ORDER BY total_sales DESC LIMIT 5;"
31. How do you retrieve customer names with orders over $1000?,"customer_name = Alice, order_amount = 1500","SELECT customers.name, orders.order_amount FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id WHERE orders.order_amount > 1000;"
32. How do you find the number of employees in each city?,"city = New York, COUNT(employee_id) = 100","SELECT city, COUNT(employee_id) FROM employees GROUP BY city;"
33. How do you calculate the average order value per customer?,"customer_id = 304, AVG(order_value) = 250","SELECT customer_id, AVG(order_value) FROM orders GROUP BY customer_id;"
34. How do you retrieve products with a price above average?,"product_name = Laptop, price = 1200","SELECT product_name, price FROM products WHERE price > (SELECT AVG(price) FROM products);"
35. How do you find the total transaction count for each payment method?,"payment_method = Credit Card, COUNT(*) = 5000","SELECT payment_method, COUNT(*) FROM transactions GROUP BY payment_method;"
36. How do you find customers with no orders in the last year?,customer_id = 102,SELECT customer_id FROM customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM orders WHERE YEAR(order_date) = 2023);
37. How do you find the largest order for each customer?,"customer_id = 205, MAX(order_value) = 2500","SELECT customer_id, MAX(order_value) FROM orders GROUP BY customer_id;"
38. How do you find the customers who ordered the most in 2023?,"customer_id = 302, total_orders = 20","`SELECT customer_id, COUNT(order_id) as total_orders"
22. Customer Orders: Join Orders and Customers to show each order with the customer's contact details. What if some orders have no associated customer?,"order_id = 1101, contact_info = ""john.doe@example.com"""," SELECT Orders.order_id, Customers.contact_info FROM Orders INNER JOIN Customers ON Orders.customer_id = Customers.id;"
23. Hotel Bookings: Retrieve booking information from Bookings and Rooms to show each booking with room details. What if some bookings are for rooms that no longer exist?,"booking_id = 1201, room_type = ""Deluxe"", check_in_date = ""2024-08-15"""," SELECT Bookings.booking_id, Rooms.room_type, Bookings.check_in_date FROM Bookings INNER JOIN Rooms ON Bookings.room_id = Rooms.id;"
24. Research Projects: Combine Projects and Researchers to list project names with the names of researchers. What if some projects do not have any assigned researchers?,"project_name = ""AI for Healthcare"", researcher_name = ""Dr. Emily Adams"""," SELECT Projects.project_name, Researchers.researcher_name FROM Projects INNER JOIN Researchers ON Projects.researcher_id = Researchers.id;"
25. Product Reviews: Join Reviews and Products to show each review with product details. What happens if some reviews reference products that are no longer available?,"review_id = 1301, product_name = ""Laptop Pro"", rating = 4.5"," SELECT Reviews.review_id, Products.product_name, Reviews.rating FROM Reviews INNER JOIN Products ON Reviews.product_id = Products.id;"
26. Transportation Logistics: Retrieve shipment details from Shipments and Transporters to show each shipment with transporter information. What if some shipments have no assigned transporter?,"shipment_id = 1401, transporter_name = ""Global Freight"", delivery_date = ""2024-08-20"""," SELECT Shipments.shipment_id, Transporters.transporter_name, Shipments.delivery_date FROM Shipments INNER JOIN Transporters ON Shipments.transporter_id = Transporters.id;"
27. Event Attendees: Join EventAttendees and Events to list attendee names with event details. What if some attendees are not registered for any event?,"attendee_name = ""David Brown"", event_name = ""Networking Gala"""," SELECT EventAttendees.attendee_name, Events.event_name FROM EventAttendees INNER JOIN Events ON EventAttendees.event_id = Events.id;"
28. Supplier Orders: Combine SupplierOrders and Suppliers to show each order along with supplier details. What if some orders are from suppliers who are no longer in the system?,"order_id = 1501, supplier_name = ""ABC Supplies"", order_date = ""2024-08-01"""," SELECT SupplierOrders.order_id, Suppliers.supplier_name, SupplierOrders.order_date FROM SupplierOrders INNER JOIN Suppliers ON SupplierOrders.supplier_id = Suppliers.id;"
29. Job Applications: Retrieve applicant details from Applications and Jobs to show each application with job details. What if some applications refer to jobs that are no longer available?,"application_id = 1601, job_title = ""Software Engineer"", application_date = ""2024-07-30"""," SELECT Applications.application_id, Jobs.job_title, Applications.application_date FROM Applications INNER JOIN Jobs ON Applications.job_id = Jobs.id;"
30. Course Enrollments: Join CourseEnrollments and Courses to list enrolled students with their course details. What if some enrollments refer to courses that have been deleted?,"student_id = 1701, course_name = ""Introduction to AI"", enrollment_date = ""2024-08-01"""," SELECT CourseEnrollments.student_id, Courses.course_name, CourseEnrollments.enrollment_date FROM CourseEnrollments INNER JOIN Courses ON CourseEnrollments.course_id = Courses.id;"
31. Library Transactions: Combine LibraryTransactions and Books to show each transaction with book details. What happens if some transactions reference books that have been removed?,"transaction_id = 1801, title = ""1984"", transaction_date = ""2024-08-05"""," SELECT LibraryTransactions.transaction_id, Books.title, LibraryTransactions.transaction_date FROM LibraryTransactions INNER JOIN Books ON LibraryTransactions.book_id = Books.id;"
39. How do you calculate the total revenue by quarter for 2023?,"quarter = Q1, total_revenue = 1000000","SELECT QUARTER(transaction_date) as quarter, SUM(amount) as total_revenue FROM transactions WHERE YEAR(transaction_date) = 2023 GROUP BY quarter;"
40. How do you find employees hired in the last 6 months?,"employee_id = 406, hire_date = '2023-03-01'",SELECT * FROM employees WHERE hire_date >= CURDATE() - INTERVAL 6 MONTH;
41. How do you retrieve orders shipped in a specific region?,"order_id = 1080, region = West",SELECT * FROM orders WHERE region = 'West';
42. How do you find the customer with the highest number of returns?,"customer_id = 505, return_count = 15","SELECT customer_id, COUNT(return_id) as return_count FROM returns GROUP BY customer_id ORDER BY return_count DESC LIMIT 1;"
43. How do you find the average time between orders for each customer?,"customer_id = 306, avg_days_between_orders = 30","SELECT customer_id, AVG(DATEDIFF(LEAD(order_date, 1) OVER (PARTITION BY customer_id ORDER BY order_date), order_date)) as avg_days_between_orders FROM orders GROUP BY customer_id;"
44. How do you find the most common product category?,"category = Apparel, count = 1000","SELECT category, COUNT(*) as count FROM products GROUP BY category ORDER BY count DESC LIMIT 1;"
45. How do you find orders with a delivery date after the estimated date?,"order_id = 1100, delivery_date = '2023-08-05'",SELECT * FROM orders WHERE delivery_date > estimated_delivery_date;
46. How do you identify products with decreasing sales over three months?,"product_id = 402, decreasing_sales = true",SELECT product_id FROM sales WHERE sales_date >= CURDATE() - INTERVAL 3 MONTH GROUP BY product_id HAVING SUM(sales) < (SELECT SUM(sales) FROM sales WHERE sales_date >= CURDATE() - INTERVAL 6 MONTH AND sales_date < CURDATE() - INTERVAL 3 MONTH GROUP BY product_id);
47. How do you find the employees who manage the most projects?,"employee_id = 508, project_count = 8","SELECT manager_id, COUNT(project_id) as project_count FROM projects GROUP BY manager_id ORDER BY project_count DESC LIMIT 1;"
48. How do you find the total number of products sold in each category?,"category = Home Goods, total_sold = 15000","SELECT category, SUM(quantity_sold) as total_sold FROM sales GROUP BY category;"
49. How do you find the suppliers who provide the highest number of products?,"supplier_id = 610, product_count = 300","SELECT supplier_id, COUNT(product_id) as product_count FROM products GROUP BY supplier_id ORDER BY product_count DESC LIMIT 1;"
50. How do you calculate the customer lifetime value (CLV)?,"customer_id = 102, CLV = 5000","SELECT customer_id, SUM(amount) as CLV FROM transactions GROUP BY customer_id;"
32. Order Details: Join Orders and Products to show order details with product names.,"order_id = 2001, product_name = ""Bluetooth Speaker"""," SELECT Orders.order_id, Products.product_name FROM Orders INNER JOIN Products ON Orders.product_id = Products.id;"
33. Student Grades: Combine Grades and Students to show student names and their grades.,"student_name = ""Jake White"", grade = ""A"""," SELECT Students.name, Grades.grade FROM Grades INNER JOIN Students ON Grades.student_id = Students.id;"
34. Customer Addresses: List customer orders and their addresses.,"order_id = 2101, address = ""123 Maple Ave"""," SELECT Orders.order_id, Customers.address FROM Orders INNER JOIN Customers ON Orders.customer_id = Customers.id;"
35. Product Suppliers: Get product names and their suppliers.,"product_name = ""Smartwatch"", supplier_name = ""TechSupply Inc."""," SELECT Products.product_name, Suppliers.supplier_name FROM Products INNER JOIN Suppliers ON Products.supplier_id = Suppliers.id;"
36. Rental Equipment: Show rentals with equipment details.,"rental_id = 2201, equipment_name = ""Projector"""," SELECT Rentals.rental_id, Equipment.equipment_name FROM Rentals INNER JOIN Equipment ON Rentals.equipment_id = Equipment.id;"
37. Event Registrations: List registrants and their events.,"registrant_name = ""Sara Miller"", event_name = ""Annual Gala"""," SELECT Registrants.name, Events.event_name FROM Registrants INNER JOIN Events ON Registrants.event_id = Events.id;"
38. Employee Departments: Show employees and their departments.,"employee_name = ""Michael Green"", department_name = ""Marketing"""," SELECT Employees.name, Departments.department_name FROM Employees INNER JOIN Departments ON Employees.department_id = Departments.id;"
39. Library Books: Join Books and Authors to list books and their authors.,"book_title = ""War and Peace"", author_name = ""Leo Tolstoy"""," SELECT Books.title, Authors.name FROM Books INNER JOIN Authors ON Books.author_id = Authors.id;"
40. Order Payments: Retrieve orders with payment information.,"order_id = 2301, payment_amount = ""$150.00"""," SELECT Orders.order_id, Payments.amount FROM Orders INNER JOIN Payments ON Orders.payment_id = Payments.id;"
41. Conference Speakers: Show conference details with speaker names.,"conference_name = ""Tech Innovators"", speaker_name = ""Dr. Alan Smith"""," SELECT Conferences.name, Speakers.speaker_name FROM Conferences INNER JOIN Speakers ON Conferences.speaker_id = Speakers.id;"
42. Delivery Shipments: Join Deliveries and Shipments to show delivery details with shipment info.,"delivery_id = 2401, shipment_details = ""2 boxes, Fragile"""," SELECT Deliveries.delivery_id, Shipments.details FROM Deliveries INNER JOIN Shipments ON Deliveries.shipment_id = Shipments.id;"
43. Customer Reviews: List customer reviews with product names.,"review_id = 2501, product_name = ""Air Purifier"", review_rating = ""5 stars"""," SELECT Reviews.review_id, Products.product_name, Reviews.rating FROM Reviews INNER JOIN Products ON Reviews.product_id = Products.id;"
44. Employee Salaries: Retrieve employee salaries and their departments.,"employee_name = ""Sophia Clark"", salary = ""$85,000"""," SELECT Employees.name, Employees.salary, Departments.department_name FROM Employees INNER JOIN Departments ON Employees.department_id = Departments.id;"
45. Sales Data: Show sales and their respective products.,"sale_id = 2601, product_name = ""Electric Drill"", quantity_sold = 5"," SELECT Sales.sale_id, Products.product_name, Sales.quantity FROM Sales INNER JOIN Products ON Sales.product_id = Products.id;"
46. Invoice Details: Join Invoices and Customers to list invoices with customer names.,"invoice_id = 2701, customer_name = ""Rachel Adams"""," SELECT Invoices.invoice_id, Customers.name FROM Invoices INNER JOIN Customers ON Invoices.customer_id = Customers.id;"
47. Course Instructors: Show courses and their instructors.,"course_name = ""Advanced Python"", instructor_name = ""Dr. Mark Jones"""," SELECT Courses.course_name, Instructors.instructor_name FROM Courses INNER JOIN Instructors ON Courses.instructor_id = Instructors.id;"
48. Warranty Claims: Retrieve warranty claims and associated products.,"claim_id = 2801, product_name = ""Coffee Maker"", claim_date = ""2024-08-02"""," SELECT WarrantyClaims.claim_id, Products.product_name, WarrantyClaims.claim_date FROM WarrantyClaims INNER JOIN Products ON WarrantyClaims.product_id = Products.id;"
49. Product Orders: Join Orders and Products to list orders and their product names.,"order_id = 2901, product_name = ""Wireless Mouse"""," SELECT Orders.order_id, Products.product_name FROM Orders INNER JOIN Products ON Orders.product_id = Products.id;"
50. Workshop Attendees: Show workshops and attendees' names.,"workshop_name = ""Digital Marketing"", attendee_name = ""Paul Green"""," SELECT Workshops.name, Attendees.name FROM Attendees INNER JOIN Workshops ON Attendees.workshop_id = Workshops.id;"
51. Sales Regions: List sales and the regions they were made in.,"sale_id = 3001, region = ""West Coast"""," SELECT Sales.sale_id, Regions.region_name FROM Sales INNER JOIN Regions ON Sales.region_id = Regions.id;"
52. Book Authors: Retrieve book titles and their authors.,"book_title = ""1984"", author_name = ""George Orwell"""," SELECT Books.title, Authors.name FROM Books INNER JOIN Authors ON Books.author_id = Authors.id;"
53. Training Sessions: Combine Sessions and Trainers to show sessions and their trainers.,"session_name = ""Leadership Skills"", trainer_name = ""John Smith"""," SELECT Sessions.session_name, Trainers.trainer_name FROM Sessions INNER JOIN Trainers ON Sessions.trainer_id = Trainers.id;"
54. Patient Appointments: List appointments with patient names and doctors.,"appointment_id = 3101, patient_name = ""Lisa Wong"", doctor_name = ""Dr. Lee"""," SELECT Appointments.appointment_id, Patients.name, Doctors.name FROM Appointments INNER JOIN Patients ON Appointments.patient_id = Patients.id INNER JOIN Doctors ON Appointments.doctor_id = Doctors.id;"
55. Subscription Plans: Show subscriptions with plan details.,"subscription_id = 3201, plan_name = ""Premium"", cost = ""$19.99"""," SELECT Subscriptions.subscription_id, Plans.plan_name, Plans.cost FROM Subscriptions INNER JOIN Plans ON Subscriptions.plan_id = Plans.id;"
56. Movie Ratings: Retrieve movies and their ratings.,"movie_title = ""The Matrix"", rating = ""4.8"""," SELECT Movies.title, Ratings.rating FROM Movies INNER JOIN Ratings ON Movies.id = Ratings.movie_id;"
57. Vendor Products: List products and their vendors.,"product_name = ""Tablet"", vendor_name = ""TechWorld"""," SELECT Products.product_name, Vendors.vendor_name FROM Products INNER JOIN Vendors ON Products.vendor_id = Vendors.id;"
58. Delivery Addresses: Join Deliveries and Addresses to show delivery details with addresses.,"delivery_id = 3301, address = ""456 Oak St"""," SELECT Deliveries.delivery_id, Addresses.address FROM Deliveries INNER JOIN Addresses ON Deliveries.address_id = Addresses.id;"
59. Course Assignments: Show courses with assigned instructors.,"course_name = ""Database Systems"", instructor_name = ""Dr. Johnson"""," SELECT Courses.course_name, Instructors.instructor_name FROM Courses INNER JOIN Instructors ON Courses.instructor_id = Instructors.id;"
60. Purchase Orders: Retrieve purchase orders with supplier details.,"purchase_order_id = 3401, supplier_name = ""Office Supplies Co."""," SELECT PurchaseOrders.purchase_order_id, Suppliers.supplier_name FROM PurchaseOrders INNER JOIN Suppliers ON PurchaseOrders.supplier_id = Suppliers.id;"
61. Task Assignments: List tasks and the employees assigned to them.,"task_id = 3501, employee_name = ""Sandra Miller"""," SELECT Tasks.task_id, Employees.name FROM Tasks INNER JOIN Employees ON Tasks.employee_id = Employees.id;"
62. Product Categories: Join Products and Categories to list products with their categories.,"product_name = ""Air Conditioner"", category_name = ""Home Appliances"""," SELECT Products.product_name, Categories.category_name FROM Products INNER JOIN Categories ON Products.category_id = Categories.id;"
63. Rental Services: Show rentals and the service providers.,"rental_id = 3601, provider_name = ""QuickRent"""," SELECT Rentals.rental_id, ServiceProviders.provider_name FROM Rentals INNER JOIN ServiceProviders ON Rentals.provider_id = ServiceProviders.id;"
64. Membership Levels: List memberships with their level details.,"membership_id = 3701, level_name = ""Gold"", benefits = ""Free shipping"""," SELECT Memberships.membership_id, Levels.level_name, Levels.benefits FROM Memberships INNER JOIN Levels ON Memberships.level_id = Levels.id;"
65. Invoice Payments: Combine Invoices and Payments to show invoices with payment details.,"invoice_id = 3801, payment_amount = ""$120.00"""," SELECT Invoices.invoice_id, Payments.amount FROM Invoices INNER JOIN Payments ON Invoices.payment_id = Payments.id;"
66. Hotel Rooms: Retrieve room details and their types.,"room_id = 3901, room_type = ""Suite"""," SELECT Rooms.room_id, RoomTypes.room_type FROM Rooms INNER JOIN RoomTypes ON Rooms.room_type_id = RoomTypes.id;"
67. User Activities: Show user activities and their descriptions.,"user_id = 4001, activity_description = ""Login"""," SELECT Users.user_id, Activities.description FROM UserActivities INNER JOIN Activities ON UserActivities.activity_id = Activities.id;"
68. Supplier Contacts: List suppliers and their contact information.,"supplier_name = ""GreenTech"", contact_info = ""555-1234"""," SELECT Suppliers.supplier_name, Contacts.contact_info FROM Suppliers INNER JOIN Contacts ON Suppliers.contact_id = Contacts.id;"
69. Job Openings: Join Jobs and Departments to show job openings with department names.,"job_id = 4101, department_name = ""Engineering"""," SELECT Jobs.job_id, Departments.department_name FROM Jobs INNER JOIN Departments ON Jobs.department_id = Departments.id;"
70. Software Licenses: Retrieve software licenses and their types.,"license_id = 4201, license_type = ""Enterprise"""," SELECT Licenses.license_id, LicenseTypes.license_type FROM Licenses INNER JOIN LicenseTypes ON Licenses.license_type_id = LicenseTypes.id;"
71. Author Books: Join Books and Authors to list each book with its author.,"book_title = ""The Great Gatsby"", author_name = ""F. Scott Fitzgerald"""," SELECT Books.title, Authors.name FROM Books INNER JOIN Authors ON Books.author_id = Authors.id;"
72. Employee Projects: Show employees and the projects they are working on.,"employee_name = ""Alice Carter"", project_name = ""Website Redesign"""," SELECT Employees.name, Projects.project_name FROM Employees INNER JOIN Projects ON Employees.project_id = Projects.id;"
73. Membership Benefits: List membership plans with their benefits.,"membership_id = 4301, plan_name = ""Silver"", benefits = ""10% discount"""," SELECT Memberships.membership_id, Plans.plan_name, Plans.benefits FROM Memberships INNER JOIN Plans ON Memberships.plan_id = Plans.id;"
74. Service Orders: Retrieve service orders and their associated services.,"service_order_id = 4401, service_name = ""Cleaning"""," SELECT ServiceOrders.service_order_id, Services.service_name FROM ServiceOrders INNER JOIN Services ON ServiceOrders.service_id = Services.id;"
75. Customer Feedback: Show customer feedback with product details.,"feedback_id = 4501, product_name = ""Smartphone"", feedback = ""Excellent"""," SELECT Feedback.feedback_id, Products.product_name, Feedback.comments FROM Feedback INNER JOIN Products ON Feedback.product_id = Products.id;"
76. Course Materials: Combine Courses and Materials to list courses with their materials.,"course_name = ""Machine Learning"", material_name = ""Lecture Notes"""," SELECT Courses.name, Materials.material_name FROM Courses INNER JOIN Materials ON Courses.material_id = Materials.id;"
77. Job Applicants: Retrieve job applicants with their respective job postings.,"applicant_name = ""Ethan Adams"", job_title = ""Marketing Manager"""," SELECT Applicants.name, Jobs.job_title FROM Applicants INNER JOIN Jobs ON Applicants.job_id = Jobs.id;"
78. Product Discounts: Show products and their discount rates.,"product_name = ""Washing Machine"", discount_rate = ""15%"""," SELECT Products.product_name, Discounts.discount_rate FROM Products INNER JOIN Discounts ON Products.discount_id = Discounts.id;"
79. Rental Agreements: List rental agreements with the tenants' names.,"agreement_id = 4601, tenant_name = ""Emily Brown"""," SELECT RentalAgreements.agreement_id, Tenants.name FROM RentalAgreements INNER JOIN Tenants ON RentalAgreements.tenant_id = Tenants.id;"
80. Patient Prescriptions: Combine Prescriptions and Doctors to show prescriptions with doctor details.,"prescription_id = 4701, doctor_name = ""Dr. Harris"""," SELECT Prescriptions.prescription_id, Doctors.name FROM Prescriptions INNER JOIN Doctors ON Prescriptions.doctor_id = Doctors.id;"
81. Supplier Orders: Show orders and their suppliers.,"order_id = 4801, supplier_name = ""Food Supply Co."""," SELECT Orders.order_id, Suppliers.supplier_name FROM Orders INNER JOIN Suppliers ON Orders.supplier_id = Suppliers.id;"
82. Employee Benefits: Retrieve employees and their benefit plans.,"employee_name = ""Rachel Green"", benefit_plan = ""Health Insurance"""," SELECT Employees.name, BenefitPlans.plan_name FROM Employees INNER JOIN BenefitPlans ON Employees.benefit_plan_id = BenefitPlans.id;"
83. Delivery Locations: List deliveries with their destination locations.,"delivery_id = 4901, location = ""789 Pine St"""," SELECT Deliveries.delivery_id, Locations.location_name FROM Deliveries INNER JOIN Locations ON Deliveries.location_id = Locations.id;"
84. Training Programs: Show training programs with their trainers.,"training_program_name = ""Leadership Essentials"", trainer_name = ""Michael Johnson"""," SELECT TrainingPrograms.name, Trainers.name FROM TrainingPrograms INNER JOIN Trainers ON TrainingPrograms.trainer_id = Trainers.id;"
85. Event Locations: Retrieve events and their locations.,"event_name = ""Tech Conference"", location = ""Convention Center"""," SELECT Events.name, Locations.location_name FROM Events INNER JOIN Locations ON Events.location_id = Locations.id;"
86. Customer Orders: List orders with customer names and order amounts.,"order_id = 5001, customer_name = ""Linda White"", order_amount = ""$250.00"""," SELECT Orders.order_id, Customers.name, Orders.amount FROM Orders INNER JOIN Customers ON Orders.customer_id = Customers.id;"
87. Product Reviews: Combine Products and Reviews to show product reviews with ratings.,"product_name = ""Electric Kettle"", review_rating = ""4 stars"""," SELECT Products.product_name, Reviews.rating FROM Reviews INNER JOIN Products ON Reviews.product_id = Products.id;"
88. Maintenance Requests: Show maintenance requests with their statuses.,"request_id = 5101, status = ""Completed"""," SELECT MaintenanceRequests.request_id, Statuses.status_name FROM MaintenanceRequests INNER JOIN Statuses ON MaintenanceRequests.status_id = Statuses.id;"
89. Subscription Services: List subscriptions and their service details.,"subscription_id = 5201, service_name = ""Online Storage"""," SELECT Subscriptions.subscription_id, Services.service_name FROM Subscriptions INNER JOIN Services ON Subscriptions.service_id = Services.id;"
90. Shipment Tracking: Retrieve shipments with tracking information.,"shipment_id = 5301, tracking_number = ""1Z9999999999999999"""," SELECT Shipments.shipment_id, TrackingInfo.tracking_number FROM Shipments INNER JOIN TrackingInfo ON Shipments.tracking_id = TrackingInfo.id;"
91. Staff Meetings: List meetings with their staff attendees.,"meeting_id = 5401, staff_name = ""George Harris"""," SELECT Meetings.meeting_id, Staff.name FROM Meetings INNER JOIN Staff ON Meetings.staff_id = Staff.id;"
92. Rental Equipment: Show rental agreements with equipment details.,"rental_id = 5501, equipment_name = ""Laptop"""," SELECT RentalAgreements.rental_id, Equipment.name FROM RentalAgreements INNER JOIN Equipment ON RentalAgreements.equipment_id = Equipment.id;"
93. Service Feedback: Retrieve feedback with service details.,"feedback_id = 5601, service_name = ""Home Cleaning"", feedback_comments = ""Very satisfied"""," SELECT Feedback.feedback_id, Services.service_name, Feedback.comments FROM Feedback INNER JOIN Services ON Feedback.service_id = Services.id;"
94. Membership Transactions: List transactions with membership details.,"transaction_id = 5701, membership_type = ""Gold"", amount = ""$200.00"""," SELECT Transactions.transaction_id, Memberships.membership_type, Transactions.amount FROM Transactions INNER JOIN Memberships ON Transactions.membership_id = Memberships.id;"
95. Purchase Returns: Show purchase returns with product details.,"return_id = 5801, product_name = ""Office Chair"", return_reason = ""Defective"""," SELECT Returns.return_id, Products.product_name, Returns.reason FROM Returns INNER JOIN Products ON Returns.product_id = Products.id;"
96. Product Inventory: Combine Inventory and Products to list inventory levels with product names.,"inventory_id = 5901, product_name = ""Desk Lamp"", quantity_in_stock = 20"," SELECT Inventory.inventory_id, Products.product_name, Inventory.quantity FROM Inventory INNER JOIN Products ON Inventory.product_id = Products.id;"
97. Employee Shifts: List shifts and the employees assigned to them.,"shift_id = 6001, employee_name = ""Julia Roberts"", shift_time = ""09:00 - 17:00"""," SELECT Shifts.shift_id, Employees.name, Shifts.shift_time FROM Shifts INNER JOIN Employees ON Shifts.employee_id = Employees.id;"
98. Product Orders: Show orders with product names and quantities.,"order_id = 6101, product_name = ""Electric Drill"", quantity = 3"," SELECT Orders.order_id, Products.product_name, Orders.quantity FROM Orders INNER JOIN Products ON Orders.product_id = Products.id;"
99. Subscription Renewals: Retrieve subscription renewals with their plan details.,"renewal_id = 6201, plan_name = ""Standard"", renewal_date = ""2024-08-10"""," SELECT Renewals.renewal_id, Plans.plan_name, Renewals.renewal_date FROM Renewals INNER JOIN Plans ON Renewals.plan_id = Plans.id;"
100. Project Budgets: Show projects with their budget information.,"project_name = ""Website Revamp"", budget = ""$10,000"""," SELECT Projects.project_name, Budgets.amount FROM Projects INNER JOIN Budgets ON Projects.budget_id = Budgets.id;"
101. Customer Support Tickets: List support tickets with customer names.,"ticket_id = 6301, customer_name = ""Nancy Evans"", issue = ""Login problem"""," SELECT SupportTickets.ticket_id, Customers.name, SupportTickets.issue FROM SupportTickets INNER JOIN Customers ON SupportTickets.customer_id = Customers.id;"
102. Supplier Contacts: Combine suppliers with their contact information.,"supplier_name = ""Grocery Supply Inc."", contact_name = ""John Doe"""," SELECT Suppliers.supplier_name, Contacts.contact_name FROM Suppliers INNER JOIN Contacts ON Suppliers.contact_id = Contacts.id;"
103. Training Enrollment: Retrieve training sessions and enrolled participants.,"session_id = 6401, participant_name = ""Laura Smith"""," SELECT TrainingSessions.session_id, Participants.name FROM Enrollments INNER JOIN TrainingSessions ON Enrollments.session_id = TrainingSessions.id INNER JOIN Participants ON Enrollments.participant_id = Participants.id;"
104. Service Providers: List service providers and their service types.,"provider_name = ""Elite Services"", service_type = ""Plumbing"""," SELECT ServiceProviders.provider_name, Services.service_type FROM ServiceProviders INNER JOIN Services ON ServiceProviders.service_id = Services.id;"
105. Invoice Items: Show invoices with item details.,"invoice_id = 6501, item_description = ""Office Desk"", amount = ""$300.00"""," SELECT Invoices.invoice_id, InvoiceItems.item_description, InvoiceItems.amount FROM Invoices INNER JOIN InvoiceItems ON Invoices.id = InvoiceItems.invoice_id;"
106. Warehouse Locations: Retrieve warehouse locations and their addresses.,"warehouse_id = 6601, address = ""100 Industrial Park"""," SELECT Warehouses.warehouse_id, Addresses.address FROM Warehouses INNER JOIN Addresses ON Warehouses.address_id = Addresses.id;"
107. Patient Appointments: Show patient appointments with doctor names.,"appointment_id = 6701, patient_name = ""Michael Taylor"", doctor_name = ""Dr. Patel"""," SELECT Appointments.appointment_id, Patients.name, Doctors.name FROM Appointments INNER JOIN Patients ON Appointments.patient_id = Patients.id INNER JOIN Doctors ON Appointments.doctor_id = Doctors.id;"
108. Job Candidates: List job postings with candidate names.,"job_id = 6801, candidate_name = ""Samantha Clark"""," SELECT Jobs.job_id, Candidates.name FROM JobApplications INNER JOIN Jobs ON JobApplications.job_id = Jobs.id INNER JOIN Candidates ON JobApplications.candidate_id = Candidates.id;"
109. Supplier Orders: Combine supplier orders with their products.,"order_id = 6901, product_name = ""Cleaning Supplies"", order_amount = ""$500.00"""," SELECT SupplierOrders.order_id, Products.product_name, SupplierOrders.order_amount FROM SupplierOrders INNER JOIN Products ON SupplierOrders.product_id = Products.id;"
110. Course Enrollment: Show enrolled students and their courses.,"student_name = ""Emma Wilson"", course_name = ""Data Science 101"""," SELECT Enrollments.student_name, Courses.course_name FROM Enrollments INNER JOIN Courses ON Enrollments.course_id = Courses.id;"
111. Conference Sessions: Retrieve conference sessions and their speakers.,"session_id = 7001, speaker_name = ""Dr. Martin King"""," SELECT Sessions.session_id, Speakers.name FROM Sessions INNER JOIN Speakers ON Sessions.speaker_id = Speakers.id;"
112. Inventory Management: Show inventory items with their suppliers.,"inventory_id = 7101, item_name = ""Laptop Stand"", supplier_name = ""Tech Essentials"""," SELECT Inventory.inventory_id, InventoryItems.item_name, Suppliers.supplier_name FROM Inventory INNER JOIN InventoryItems ON Inventory.item_id = InventoryItems.id INNER JOIN Suppliers ON InventoryItems.supplier_id = Suppliers.id;"
113. Employee Leave: List leave requests with employee names and leave dates.,"leave_id = 7201, employee_name = ""James Carter"", leave_date = ""2024-09-01"""," SELECT LeaveRequests.leave_id, Employees.name, LeaveRequests.leave_date FROM LeaveRequests INNER JOIN Employees ON LeaveRequests.employee_id = Employees.id;"
114. Shipping Details: Show shipping records with product details.,"shipping_id = 7301, product_name = ""Smartphone"", shipping_status = ""Shipped"""," SELECT ShippingRecords.shipping_id, Products.product_name, ShippingRecords.status FROM ShippingRecords INNER JOIN Products ON ShippingRecords.product_id = Products.id;"
115. Feedback Surveys: Retrieve survey feedback with respondent names.,"survey_id = 7401, respondent_name = ""Kevin Jones"", feedback_score = ""8/10"""," SELECT Surveys.survey_id, Respondents.name, Surveys.feedback_score FROM Surveys INNER JOIN Respondents ON Surveys.respondent_id = Respondents.id;"
116. Library Loans: List library books with loan details.,"loan_id = 7501, book_title = ""The Catcher in the Rye"", loan_date = ""2024-08-05"""," SELECT Loans.loan_id, Books.title, Loans.loan_date FROM Loans INNER JOIN Books ON Loans.book_id = Books.id;"
117. Vendor Services: Show services provided by vendors.,"vendor_name = ""Tech Solutions"", service_name = ""IT Support"""," SELECT Vendors.vendor_name, Services.service_name FROM Vendors INNER JOIN Services ON Vendors.service_id = Services.id;"
118. Product Returns: Retrieve product returns and their reasons.,"return_id = 7601, product_name = ""Washing Machine"", return_reason = ""Defective"""," SELECT ProductReturns.return_id, Products.product_name, ProductReturns.reason FROM ProductReturns INNER JOIN Products ON ProductReturns.product_id = Products.id;"
119. Event Schedules: Show events and their scheduled times.,"event_id = 7701, event_name = ""Annual Meeting"", scheduled_time = ""2024-09-15 10:00 AM"""," SELECT Events.event_id, Events.event_name, Events.scheduled_time FROM Events;"
120. Appointment Types: Combine Appointments and AppointmentTypes to show appointment types with details.,"appointment_id = 7801, appointment_type = ""Consultation"", details = ""Initial consultation for new patients"""," SELECT Appointments.appointment_id, AppointmentTypes.type_name, AppointmentTypes.details FROM Appointments INNER JOIN AppointmentTypes ON Appointments.appointment_type_id = AppointmentTypes.id;"
53. What are the differences between SQL and NoSQL databases?,"SQL is structured with fixed schemas, while NoSQL is flexible with dynamic schemas.",-
54. How do you list all columns in a table?,"column1, column2, column3",SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'table_name';
55. How do you retrieve unique values from a column?,"value1, value2",SELECT DISTINCT column_name FROM table_name;
56. How do you calculate the total number of orders for each product?,"product_id = 101, order_count = 50","SELECT product_id, COUNT(order_id) as order_count FROM orders GROUP BY product_id;"
57. How do you find the average transaction value for each customer?,"customer_id = 305, avg_transaction_value = 250","SELECT customer_id, AVG(amount) as avg_transaction_value FROM transactions GROUP BY customer_id;"
58. How do you find the highest-paid employee in each department?,"department_id = 403, max_salary = 120000","SELECT department_id, MAX(salary) as max_salary FROM employees GROUP BY department_id;"
59. How do you get the first and last order date for each customer?,"customer_id = 308, first_order_date = '2023-01-01', last_order_date = '2023-08-01'","SELECT customer_id, MIN(order_date) as first_order_date, MAX(order_date) as last_order_date FROM orders GROUP BY customer_id;"
60. How do you find all customers who have placed exactly three orders?,customer_id = 609,SELECT customer_id FROM orders GROUP BY customer_id HAVING COUNT(order_id) = 3;
61. How do you find the most recent transaction for each account?,"account_id = 707, transaction_date = '2023-08-07'","SELECT account_id, MAX(transaction_date) as most_recent_transaction FROM transactions GROUP BY account_id;"
62. How do you find employees who joined the company in 2023?,"employee_id = 412, join_date = '2023-04-01'",SELECT * FROM employees WHERE YEAR(join_date) = 2023;
63. How do you update a column value based on a condition?,Rows updated,UPDATE table_name SET column_name = new_value WHERE condition;
64. How do you find products with no sales in the last year?,product_id = 503,SELECT product_id FROM products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM sales WHERE YEAR(sale_date) = 2023);
65. How do you calculate the percentage of orders delivered on time?,percentage_on_time = 85.0,SELECT (COUNT(*) FILTER (WHERE delivery_date <= estimated_delivery_date) / COUNT(*)) * 100 as percentage_on_time FROM orders;
66. How do you retrieve the top 3 most profitable products?,"product_id = 603, profit = 50000","SELECT product_id, SUM(profit) as profit FROM sales GROUP BY product_id ORDER BY profit DESC LIMIT 3;"
67. How do you find the average number of days between transactions for each account?,"account_id = 805, avg_days_between_transactions = 15","SELECT account_id, AVG(DATEDIFF(LEAD(transaction_date, 1) OVER (PARTITION BY account_id ORDER BY transaction_date), transaction_date)) as avg_days_between_transactions FROM transactions GROUP BY account_id;"
68. How do you find suppliers who have not provided any products in the last year?,supplier_id = 705,SELECT supplier_id FROM suppliers WHERE supplier_id NOT IN (SELECT DISTINCT supplier_id FROM products WHERE YEAR(provided_date) = 2023);
69. How do you calculate the total expenses for each department?,"department_id = 409, total_expenses = 750000","SELECT department_id, SUM(expenses) as total_expenses FROM expenses GROUP BY department_id;"
70. How do you find the customer with the longest account history?,"customer_id = 910, account_duration = 3650","SELECT customer_id, DATEDIFF(MAX(account_end_date), MIN(account_start_date)) as account_duration FROM accounts GROUP BY customer_id ORDER BY account_duration DESC LIMIT 1;"
71. How do you retrieve the last three orders for each customer?,"customer_id = 315, order_id = 1110","SELECT customer_id, order_id FROM (SELECT customer_id, order_id, ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY order_date DESC) as rn FROM orders) as subquery WHERE rn <= 3;"
72. How do you find customers who have never returned a product?,customer_id = 512,SELECT customer_id FROM customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM returns);
73. How do you calculate the average number of orders per customer per month?,"month = 7, avg_orders_per_customer = 3","SELECT MONTH(order_date) as month, AVG(order_count) as avg_orders_per_customer FROM (SELECT customer_id, MONTH(order_date) as month, COUNT(order_id) as order_count FROM orders GROUP BY customer_id, month) as subquery GROUP BY month;"
74. How do you find products that have increased in price by more than 20% in the last year?,product_id = 604,"SELECT product_id FROM products WHERE (price - LAG(price, 1) OVER (PARTITION BY product_id ORDER BY price_date)) / LAG(price, 1) OVER (PARTITION BY product_id ORDER BY price_date) > 0.20;"
75. How do you find the average number of items per order for each product category?,"category = Electronics, avg_items_per_order = 5","SELECT category, AVG(quantity) as avg_items_per_order FROM order_items GROUP BY category;"
76. How do you find the customers who have placed more than 50 orders in total?,customer_id = 613,SELECT customer_id FROM orders GROUP BY customer_id HAVING COUNT(order_id) > 50;
77. How do you calculate the total revenue from international sales?,total_international_revenue = 5000000,SELECT SUM(amount) as total_international_revenue FROM sales WHERE is_international = TRUE;
78. How do you find the most recent product added to the inventory?,"product_id = 705, added_date = '2023-08-01'","SELECT product_id, added_date FROM inventory ORDER BY added_date DESC LIMIT 1;"
79. How do you calculate the total number of orders canceled each month?,"month = 6, canceled_orders = 50","SELECT MONTH(cancellation_date) as month, COUNT(order_id) as canceled_orders FROM orders WHERE status = 'Canceled' GROUP BY month;"
80. How do you retrieve employees who have received the highest bonus in each department?,"department_id = 408, employee_id = 120, bonus = 10000","SELECT department_id, employee_id, bonus FROM (SELECT department_id, employee_id, bonus, RANK() OVER (PARTITION BY department_id ORDER BY bonus DESC) as rank FROM bonuses) as subquery WHERE rank = 1;"
"81. How do you find the top-selling product for each month, along with its sales amount?","month = 7, product_id = 306, total_sales = 250000","SELECT month, product_id, total_sales FROM (SELECT MONTH(sale_date) as month, product_id, SUM(amount) as total_sales, RANK() OVER (PARTITION BY MONTH(sale_date) ORDER BY SUM(amount) DESC) as rank FROM sales GROUP BY MONTH(sale_date), product_id) as ranked_sales WHERE rank = 1;"
82. How do you identify the longest consecutive sequence of days where a customer made purchases?,"customer_id = 402, max_consecutive_days = 5","SELECT customer_id, MAX(consecutive_days) as max_consecutive_days FROM (SELECT customer_id, COUNT(*) as consecutive_days FROM (SELECT customer_id, purchase_date, DATEDIFF(purchase_date, LAG(purchase_date, 1) OVER (PARTITION BY customer_id ORDER BY purchase_date)) as diff FROM purchases) as diffs WHERE diff = 1 GROUP BY customer_id, diff) as consecutive GROUP BY customer_id;"
83. How do you find the second most common combination of products ordered together?,"product_combination = 'A, B', order_count = 120","SELECT product_combination, order_count FROM (SELECT product_combination, COUNT(*) as order_count, RANK() OVER (ORDER BY COUNT(*) DESC) as rank FROM (SELECT GROUP_CONCAT(product_id ORDER BY product_id) as product_combination FROM order_items GROUP BY order_id) as combinations GROUP BY product_combination) as ranked_combinations WHERE rank = 2;"
84. How do you calculate the cumulative sales for each product until the current date?,"product_id = 301, cumulative_sales = 50000","SELECT product_id, SUM(amount) OVER (PARTITION BY product_id ORDER BY sale_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as cumulative_sales FROM sales;"
85. How do you find the average revenue growth rate per month over a year?,"year = 2023, avg_growth_rate = 0.05","SELECT year, AVG(growth_rate) as avg_growth_rate FROM (SELECT year, month, (revenue - LAG(revenue, 1) OVER (PARTITION BY year ORDER BY month)) / LAG(revenue, 1) OVER (PARTITION BY year ORDER BY month) as growth_rate FROM (SELECT YEAR(transaction_date) as year, MONTH(transaction_date) as month, SUM(amount) as revenue FROM transactions GROUP BY year, month) as monthly_revenue) as growth_rates WHERE year = 2023 GROUP BY year;"
86. How do you identify the product with the longest duration between its first and last sale date?,"product_id = 502, duration_days = 365","SELECT product_id, DATEDIFF(MAX(sale_date), MIN(sale_date)) as duration_days FROM sales GROUP BY product_id ORDER BY duration_days DESC LIMIT 1;"
87. How do you calculate the median transaction amount for each customer?,"customer_id = 207, median_transaction = 150","SELECT customer_id, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY amount) as median_transaction FROM transactions GROUP BY customer_id;"
88. How do you find the customers who have increased their spending by more than 50% from one year to the next?,customer_id = 603,"SELECT customer_id FROM (SELECT customer_id, SUM(amount) as year_1_amount FROM transactions WHERE YEAR(transaction_date) = 2022 GROUP BY customer_id) as year_1 JOIN (SELECT customer_id, SUM(amount) as year_2_amount FROM transactions WHERE YEAR(transaction_date) = 2023 GROUP BY customer_id) as year_2 ON year_1.customer_id = year_2.customer_id WHERE year_2_amount > 1.5 * year_1_amount;"
89. How do you determine the average time it takes for a support ticket to be resolved for each department?,"department_id = 301, avg_resolution_time = 48","SELECT department_id, AVG(TIMESTAMPDIFF(HOUR, created_at, resolved_at)) as avg_resolution_time FROM tickets WHERE status = 'Resolved' GROUP BY department_id;"
90. How do you find the products with the highest price volatility over the past year?,"product_id = 802, volatility = 0.2","SELECT product_id, (MAX(price) - MIN(price)) / AVG(price) as volatility FROM price_history WHERE YEAR(date) = 2023 GROUP BY product_id ORDER BY volatility DESC LIMIT 5;"
91. How do you calculate the month-over-month growth rate for each product category?,"category = 'Books', month = 6, growth_rate = 0.08","SELECT category, month, (revenue - LAG(revenue, 1) OVER (PARTITION BY category ORDER BY month)) / LAG(revenue, 1) OVER (PARTITION BY category ORDER BY month) as growth_rate FROM (SELECT category, MONTH(sale_date) as month, SUM(amount) as revenue FROM sales GROUP BY category, month) as monthly_revenue;"
92. How do you identify employees who have been in the same role for more than 5 years?,employee_id = 708,"SELECT employee_id FROM roles WHERE DATEDIFF(CURDATE(), start_date) > 5 * 365 AND end_date IS NULL;"
93. How do you find the top three products that contribute to the highest percentage of overall sales revenue?,"product_id = 104, contribution = 0.15","SELECT product_id, SUM(amount) / (SELECT SUM(amount) FROM sales) as contribution FROM sales GROUP BY product_id ORDER BY contribution DESC LIMIT 3;"
94. How do you determine the most popular day of the week for transactions in 2023?,"day_of_week = 'Friday', transaction_count = 25000","SELECT DAYNAME(transaction_date) as day_of_week, COUNT(*) as transaction_count FROM transactions WHERE YEAR(transaction_date) = 2023 GROUP BY day_of_week ORDER BY transaction_count DESC LIMIT 1;"
95. How do you find the average number of transactions per customer during holiday seasons?,avg_transactions = 3.5,"SELECT AVG(transaction_count) as avg_transactions FROM (SELECT customer_id, COUNT(*) as transaction_count FROM transactions WHERE MONTH(transaction_date) IN (11, 12) GROUP BY customer_id) as customer_transactions;"
96. How do you identify customers whose order value increased every month in 2023?,customer_id = 812,"SELECT customer_id FROM (SELECT customer_id, MONTH(order_date) as month, SUM(order_value) as monthly_total, LAG(SUM(order_value), 1) OVER (PARTITION BY customer_id ORDER BY MONTH(order_date)) as previous_month_total FROM orders WHERE YEAR(order_date) = 2023 GROUP BY customer_id, month) as monthly_orders WHERE monthly_total > previous_month_total GROUP BY customer_id HAVING COUNT(*) = 12;"
97. How do you find the regions with the fastest-growing customer base in 2023?,"region = 'East', growth_rate = 0.2","SELECT region, (COUNT(customer_id) - LAG(COUNT(customer_id), 1) OVER (ORDER BY MONTH(join_date))) / LAG(COUNT(customer_id), 1) OVER (ORDER BY MONTH(join_date)) as growth_rate FROM customers WHERE YEAR(join_date) = 2023 GROUP BY region, MONTH(join_date) ORDER BY growth_rate DESC LIMIT 1;"
98. How do you calculate the weighted average price of products sold based on quantity?,"product_id = 904, weighted_avg_price = 25.50","SELECT product_id, SUM(price * quantity) / SUM(quantity) as weighted_avg_price FROM sales GROUP BY product_id;"
99. How do you identify customers who have more than doubled their order frequency compared to the previous year?,customer_id = 1005,"SELECT customer_id FROM (SELECT customer_id, COUNT(order_id) / (SELECT COUNT(order_id) FROM orders WHERE YEAR(order_date) = 2022 AND customer_id = o.customer_id) as frequency_ratio FROM orders o WHERE YEAR(order_date) = 2023 GROUP BY customer_id) as frequency WHERE frequency_ratio > 2;"
100. How do you determine the top five cities with the highest average customer satisfaction scores?,"city = 'San Francisco', avg_score = 4.8","SELECT city, AVG(satisfaction_score) as avg_score FROM customer_feedback GROUP BY city ORDER BY avg_score DESC LIMIT 5;"